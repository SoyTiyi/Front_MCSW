{"ast":null,"code":"import Cookies from 'js-cookie';\n\nconst axios = require('axios').default;\n\nconst URL = 'http://localhost:3000';\n/*const URL = 'http://localhost:8080/api/auth';*/\n\nconst setHeaderOptions = (username, password) => {\n  const options = {\n    method: 'post',\n    credentials: 'include',\n    headers: {\n      'Content-type': 'application/x-www-form-urlencoded; charset=UTF-8'\n    },\n    body: `username=${username}&passwd=${password}`\n  };\n  return options;\n};\n\nclass AuthService {\n  constructor() {\n    //preguntar al servidor\n    const user = Cookies.get('signedin');\n    this.authenticated = !!user;\n  }\n\n  login(username, password) {\n    return fetch(URL + \"/login\", setHeaderOptions(username, password)).then(response => {\n      if (!response.ok) {\n        if (response.status === 404) {\n          alert('User not found, please retry');\n        }\n\n        if (response.status === 401) {\n          alert('Invalid credentials');\n        }\n      }\n\n      return response;\n    }).then(response => response.json()).then(data => {\n      if (data.success) {\n        let expiry = new Date();\n        expiry.setTime(date.getTime() + 10 * 60 * 1000);\n        Cookies.set(\"signedin\", \"visited=true; expires=\" + expiry.toGMTString());\n        let rol = data.success.trim();\n        return rol;\n      }\n    });\n  }\n\n  signup(usr) {\n    return axios.post(`${URL}/signup`, usr).then(response => response.status).catch(error => {\n      if (error.response) {\n        alert('Bad credentials');\n        console.info(error.response.status);\n        console.info(error.response.data);\n      } else {\n        alert('Server error');\n        console.info(error.message);\n      }\n    });\n  }\n\n  updateUser(usr) {\n    return axios.put(`${URL}/update`, usr).then(response => response.status).catch(error => {\n      if (error.response) {\n        alert('Something was wrong');\n        console.info(error.response.status);\n      } else {\n        alert('Server error');\n        console.info(error.message);\n      }\n    });\n  }\n\n  logout(cb) {\n    this.authenticated = false;\n    cb();\n  }\n\n  isAuthenticated() {\n    return this.authenticated;\n  }\n\n}\n\nexport default new AuthService();","map":{"version":3,"sources":["/home/natalia/Documentos/MCSW/Tareas/Sem03/Front_MCSW/cliente/src/services/AuthService.js"],"names":["Cookies","axios","require","default","URL","setHeaderOptions","username","password","options","method","credentials","headers","body","AuthService","constructor","user","get","authenticated","login","fetch","then","response","ok","status","alert","json","data","success","expiry","Date","setTime","date","getTime","set","toGMTString","rol","trim","signup","usr","post","catch","error","console","info","message","updateUser","put","logout","cb","isAuthenticated"],"mappings":"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","sourcesContent":["import Cookies from 'js-cookie'\n\n\nconst axios = require('axios').default;\nconst URL = 'http://localhost:3000';\n/*const URL = 'http://localhost:8080/api/auth';*/\n\nconst setHeaderOptions = (username, password) => {\n\n  const options = {\n    method: 'post',\n    credentials: 'include',\n    headers: {\n      'Content-type': 'application/x-www-form-urlencoded; charset=UTF-8'\n    },\n    body: `username=${username}&passwd=${password}`\n  }\n  return options;\n}\n\nclass AuthService {\n  constructor() {\n    //preguntar al servidor\n    const user = Cookies.get('signedin')\n    this.authenticated = !!user;\n  }\n\n  login(username, password) {\n\n    return fetch(URL+\"/login\", setHeaderOptions(username, password))\n    .then(response => {\n      if (!response.ok) {\n        if (response.status === 404) {\n          alert('User not found, please retry')\n        }\n        if (response.status === 401) {\n          alert('Invalid credentials')\n\n        }\n      }\n      return response\n    })\n    .then(response => response.json())\n    .then(data => {\n      if (data.success) {\n        let expiry = new Date();\n        expiry.setTime(date.getTime()+(10*60*1000));\n        Cookies.set(\"signedin\", \"visited=true; expires=\" + expiry.toGMTString());\n        let rol = data.success.trim();\n\n        return rol;\n      }\n    })\n  }\n\n  signup(usr){\n    return axios.post(`${URL}/signup`, usr)\n        .then(response => response.status)\n        .catch(error => {\n          if (error.response){\n            alert('Bad credentials')\n            console.info(error.response.status);\n            console.info(error.response.data);\n          }else{\n            alert('Server error');\n            console.info(error.message);\n          }\n        })\n  }\n\n  updateUser(usr){\n    return axios.put(`${URL}/update`, usr)\n        .then(response => response.status)\n        .catch(error => {\n          if (error.response){\n            alert('Something was wrong')\n            console.info(error.response.status);\n          }else{\n            alert('Server error');\n            console.info(error.message);\n          }\n        })\n  }\n\n  logout(cb) {\n    this.authenticated = false;\n    cb();\n  }\n\n  isAuthenticated() {\n    return this.authenticated;\n  }\n}\n\nexport default new AuthService();\n"]},"metadata":{},"sourceType":"module"}