{"ast":null,"code":"import Cookies from 'js-cookie';\n\nconst axios = require('axios').default;\n\nconst URL = 'http://localhost:3000';\n/*const URL = 'http://localhost:8080/api/auth';*/\n\nconst setHeaderOptions = (username, password) => {\n  const options = {\n    method: 'post',\n    credentials: 'include',\n    headers: {\n      'Content-type': 'application/x-www-form-urlencoded; charset=UTF-8'\n    },\n    body: `username=${username}&passwd=${password}`\n  };\n  return options;\n};\n\nconst getExpireUser = async () => {\n  await fetch(URL + \"/verifyUser\", setHeaderOptions(null, null)).then(response => {\n    if (!response.ok) {\n      return false;\n    }\n\n    return JSON.stringify(response);\n  }).then(data => {\n    if (data.valid) {\n      return true;\n    } else {\n      return false;\n    }\n  });\n};\n\nclass AuthService {\n  constructor() {\n    //preguntar al servidor\n    let user = getExpireUser();\n    alert(\"user: \" + user);\n    this.authenticated = !!user;\n  }\n\n  login(username, password) {\n    return fetch(URL + \"/login\", setHeaderOptions(username, password)).then(response => {\n      if (!response.ok) {\n        if (response.status === 404) {\n          alert('User not found, please retry');\n        }\n\n        if (response.status === 401) {\n          alert('Invalid credentials');\n        }\n      }\n\n      return response;\n    }).then(response => response.json()).then(data => {\n      if (data.success) {\n        let expiry = new Date();\n        expiry.setTime(new Date().getTime() + 10 * 60 * 1000);\n        Cookies.set(\"signedin\", \"visited=true; max-age=30000;\");\n        let rol = data.success.trim();\n        return rol;\n      }\n    });\n  }\n\n  signup(usr) {\n    return axios.post(`${URL}/signup`, usr).then(response => response.status).catch(error => {\n      if (error.response) {\n        alert('Bad credentials');\n        console.info(error.response.status);\n        console.info(error.response.data);\n      } else {\n        alert('Server error');\n        console.info(error.message);\n      }\n    });\n  }\n\n  updateUser(usr) {\n    return axios.put(`${URL}/update`, usr).then(response => response.status).catch(error => {\n      if (error.response) {\n        alert('Something was wrong');\n        console.info(error.response.status);\n      } else {\n        alert('Server error');\n        console.info(error.message);\n      }\n    });\n  }\n\n  logout(cb) {\n    this.authenticated = false;\n    cb();\n  }\n\n  isAuthenticated() {\n    return this.authenticated;\n  }\n\n}\n\nexport default new AuthService();","map":{"version":3,"sources":["/home/natalia/Documentos/MCSW/Tareas/Sem03/Front_MCSW/cliente/src/services/AuthService.js"],"names":["Cookies","axios","require","default","URL","setHeaderOptions","username","password","options","method","credentials","headers","body","getExpireUser","fetch","then","response","ok","JSON","stringify","data","valid","AuthService","constructor","user","alert","authenticated","login","status","json","success","expiry","Date","setTime","getTime","set","rol","trim","signup","usr","post","catch","error","console","info","message","updateUser","put","logout","cb","isAuthenticated"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,WAApB;;AAGA,MAAMC,KAAK,GAAGC,OAAO,CAAC,OAAD,CAAP,CAAiBC,OAA/B;;AACA,MAAMC,GAAG,GAAG,uBAAZ;AACA;;AAEA,MAAMC,gBAAgB,GAAG,CAACC,QAAD,EAAWC,QAAX,KAAwB;AAE/C,QAAMC,OAAO,GAAG;AACdC,IAAAA,MAAM,EAAE,MADM;AAEdC,IAAAA,WAAW,EAAE,SAFC;AAGdC,IAAAA,OAAO,EAAE;AACP,sBAAgB;AADT,KAHK;AAMdC,IAAAA,IAAI,EAAG,YAAWN,QAAS,WAAUC,QAAS;AANhC,GAAhB;AAQA,SAAOC,OAAP;AACD,CAXD;;AAaA,MAAMK,aAAa,GAAG,YAAY;AAChC,QAAMC,KAAK,CAACV,GAAG,GAAC,aAAL,EAAoBC,gBAAgB,CAAC,IAAD,EAAO,IAAP,CAApC,CAAL,CACLU,IADK,CACAC,QAAQ,IAAI;AAChB,QAAI,CAACA,QAAQ,CAACC,EAAd,EAAkB;AAChB,aAAO,KAAP;AACD;;AACD,WAAOC,IAAI,CAACC,SAAL,CAAeH,QAAf,CAAP;AACD,GANK,EAQLD,IARK,CAQAK,IAAI,IAAI;AACZ,QAAIA,IAAI,CAACC,KAAT,EAAgB;AACd,aAAO,IAAP;AACD,KAFD,MAGK;AACH,aAAO,KAAP;AACD;AACF,GAfK,CAAN;AAgBD,CAjBD;;AAmBA,MAAMC,WAAN,CAAkB;AAChBC,EAAAA,WAAW,GAAG;AACZ;AAEA,QAAIC,IAAI,GAAGX,aAAa,EAAxB;AAEAY,IAAAA,KAAK,CAAC,WAASD,IAAV,CAAL;AAGA,SAAKE,aAAL,GAAqB,CAAC,CAACF,IAAvB;AACD;;AAEDG,EAAAA,KAAK,CAACrB,QAAD,EAAWC,QAAX,EAAqB;AAExB,WAAOO,KAAK,CAACV,GAAG,GAAC,QAAL,EAAeC,gBAAgB,CAACC,QAAD,EAAWC,QAAX,CAA/B,CAAL,CACNQ,IADM,CACDC,QAAQ,IAAI;AAChB,UAAI,CAACA,QAAQ,CAACC,EAAd,EAAkB;AAChB,YAAID,QAAQ,CAACY,MAAT,KAAoB,GAAxB,EAA6B;AAC3BH,UAAAA,KAAK,CAAC,8BAAD,CAAL;AACD;;AACD,YAAIT,QAAQ,CAACY,MAAT,KAAoB,GAAxB,EAA6B;AAC3BH,UAAAA,KAAK,CAAC,qBAAD,CAAL;AAED;AACF;;AACD,aAAOT,QAAP;AACD,KAZM,EAaND,IAbM,CAaDC,QAAQ,IAAIA,QAAQ,CAACa,IAAT,EAbX,EAcNd,IAdM,CAcDK,IAAI,IAAI;AACZ,UAAIA,IAAI,CAACU,OAAT,EAAkB;AAChB,YAAIC,MAAM,GAAG,IAAIC,IAAJ,EAAb;AACAD,QAAAA,MAAM,CAACE,OAAP,CAAgB,IAAID,IAAJ,GAAWE,OAAX,KAAsB,KAAG,EAAH,GAAM,IAA5C;AACAlC,QAAAA,OAAO,CAACmC,GAAR,CAAY,UAAZ,EAAwB,8BAAxB;AACA,YAAIC,GAAG,GAAGhB,IAAI,CAACU,OAAL,CAAaO,IAAb,EAAV;AAEA,eAAOD,GAAP;AACD;AACF,KAvBM,CAAP;AAwBD;;AAEDE,EAAAA,MAAM,CAACC,GAAD,EAAK;AACT,WAAOtC,KAAK,CAACuC,IAAN,CAAY,GAAEpC,GAAI,SAAlB,EAA4BmC,GAA5B,EACFxB,IADE,CACGC,QAAQ,IAAIA,QAAQ,CAACY,MADxB,EAEFa,KAFE,CAEIC,KAAK,IAAI;AACd,UAAIA,KAAK,CAAC1B,QAAV,EAAmB;AACjBS,QAAAA,KAAK,CAAC,iBAAD,CAAL;AACAkB,QAAAA,OAAO,CAACC,IAAR,CAAaF,KAAK,CAAC1B,QAAN,CAAeY,MAA5B;AACAe,QAAAA,OAAO,CAACC,IAAR,CAAaF,KAAK,CAAC1B,QAAN,CAAeI,IAA5B;AACD,OAJD,MAIK;AACHK,QAAAA,KAAK,CAAC,cAAD,CAAL;AACAkB,QAAAA,OAAO,CAACC,IAAR,CAAaF,KAAK,CAACG,OAAnB;AACD;AACF,KAXE,CAAP;AAYD;;AAEDC,EAAAA,UAAU,CAACP,GAAD,EAAK;AACb,WAAOtC,KAAK,CAAC8C,GAAN,CAAW,GAAE3C,GAAI,SAAjB,EAA2BmC,GAA3B,EACFxB,IADE,CACGC,QAAQ,IAAIA,QAAQ,CAACY,MADxB,EAEFa,KAFE,CAEIC,KAAK,IAAI;AACd,UAAIA,KAAK,CAAC1B,QAAV,EAAmB;AACjBS,QAAAA,KAAK,CAAC,qBAAD,CAAL;AACAkB,QAAAA,OAAO,CAACC,IAAR,CAAaF,KAAK,CAAC1B,QAAN,CAAeY,MAA5B;AACD,OAHD,MAGK;AACHH,QAAAA,KAAK,CAAC,cAAD,CAAL;AACAkB,QAAAA,OAAO,CAACC,IAAR,CAAaF,KAAK,CAACG,OAAnB;AACD;AACF,KAVE,CAAP;AAWD;;AAEDG,EAAAA,MAAM,CAACC,EAAD,EAAK;AACT,SAAKvB,aAAL,GAAqB,KAArB;AACAuB,IAAAA,EAAE;AACH;;AAEDC,EAAAA,eAAe,GAAG;AAChB,WAAO,KAAKxB,aAAZ;AACD;;AA5Ee;;AA+ElB,eAAe,IAAIJ,WAAJ,EAAf","sourcesContent":["import Cookies from 'js-cookie'\n\n\nconst axios = require('axios').default;\nconst URL = 'http://localhost:3000';\n/*const URL = 'http://localhost:8080/api/auth';*/\n\nconst setHeaderOptions = (username, password) => {\n\n  const options = {\n    method: 'post',\n    credentials: 'include',\n    headers: {\n      'Content-type': 'application/x-www-form-urlencoded; charset=UTF-8'\n    },\n    body: `username=${username}&passwd=${password}`\n  }\n  return options;\n}\n\nconst getExpireUser = async () => {\n  await fetch(URL+\"/verifyUser\", setHeaderOptions(null, null))\n  .then(response => {\n    if (!response.ok) {\n      return false;\n    }\n    return JSON.stringify(response)\n  })\n\n  .then(data => {\n    if (data.valid) {\n      return true;\n    }\n    else {\n      return false;\n    }\n  })\n}\n\nclass AuthService {\n  constructor() {\n    //preguntar al servidor\n\n    let user = getExpireUser();\n\n    alert(\"user: \"+user)\n\n\n    this.authenticated = !!user;\n  }\n\n  login(username, password) {\n\n    return fetch(URL+\"/login\", setHeaderOptions(username, password))\n    .then(response => {\n      if (!response.ok) {\n        if (response.status === 404) {\n          alert('User not found, please retry')\n        }\n        if (response.status === 401) {\n          alert('Invalid credentials')\n\n        }\n      }\n      return response\n    })\n    .then(response => response.json())\n    .then(data => {\n      if (data.success) {\n        let expiry = new Date();\n        expiry.setTime( new Date().getTime()+(10*60*1000));\n        Cookies.set(\"signedin\", \"visited=true; max-age=30000;\");\n        let rol = data.success.trim();\n\n        return rol;\n      }\n    })\n  }\n\n  signup(usr){\n    return axios.post(`${URL}/signup`, usr)\n        .then(response => response.status)\n        .catch(error => {\n          if (error.response){\n            alert('Bad credentials')\n            console.info(error.response.status);\n            console.info(error.response.data);\n          }else{\n            alert('Server error');\n            console.info(error.message);\n          }\n        })\n  }\n\n  updateUser(usr){\n    return axios.put(`${URL}/update`, usr)\n        .then(response => response.status)\n        .catch(error => {\n          if (error.response){\n            alert('Something was wrong')\n            console.info(error.response.status);\n          }else{\n            alert('Server error');\n            console.info(error.message);\n          }\n        })\n  }\n\n  logout(cb) {\n    this.authenticated = false;\n    cb();\n  }\n\n  isAuthenticated() {\n    return this.authenticated;\n  }\n}\n\nexport default new AuthService();\n"]},"metadata":{},"sourceType":"module"}