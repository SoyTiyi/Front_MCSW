{"ast":null,"code":"import React from 'react';\nimport { setHeaderOptions } from './RequestHeader';\n\nconst axios = require('axios').default;\n\nconst URL = 'http://localhost:3000';\n/*const URL = 'http://localhost:8080/api/auth';*/\n\nconst getExpireUser = async reqBody => {\n  let valid = false; //con el rol\n\n  await fetch(URL + \"/verifyUser\", setHeaderOptions(reqBody)).then(response => response.json()).then(data => {\n    valid = data.success;\n  });\n  return valid;\n};\n\nclass AuthService extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = null;\n  }\n\n  login(username, password) {\n    let reqBody = `username=${username}&passwd=${password}`;\n    return fetch(URL + \"/login\", setHeaderOptions(reqBody)).then(response => {\n      if (!response.ok) {\n        if (response.status === 404) {\n          alert('User not found, please retry');\n        }\n\n        if (response.status === 401) {\n          alert('Invalid credentials');\n        }\n      }\n\n      return response;\n    }).then(response => response.json()).then(data => {\n      if (data.success) {\n        let rol = data.success.trim();\n        return rol;\n      }\n    });\n  }\n\n  signup(usr) {\n    return axios.post(`${URL}/signup`, usr).then(response => response.status).catch(error => {\n      if (error.response) {\n        alert('Bad credentials');\n        console.info(error.response.status);\n        console.info(error.response.data);\n      } else {\n        alert('Server error');\n        console.info(error.message);\n      }\n    });\n  }\n\n  logout(cb) {\n    this.authenticated = false;\n    cb();\n  }\n\n  async isAuthenticated(roles) {\n    let reqBody = `roles=${roles}`;\n    await getExpireUser(reqBody).then(authorized => this.state = authorized);\n    return this.state;\n  }\n\n}\n\nexport default new AuthService();","map":{"version":3,"sources":["/home/natalia/Documentos/MCSW/Tareas/Sem03/Front_MCSW/cliente/src/services/AuthService.js"],"names":["React","setHeaderOptions","axios","require","default","URL","getExpireUser","reqBody","valid","fetch","then","response","json","data","success","AuthService","Component","constructor","props","state","login","username","password","ok","status","alert","rol","trim","signup","usr","post","catch","error","console","info","message","logout","cb","authenticated","isAuthenticated","roles","authorized"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {setHeaderOptions} from './RequestHeader';\n\nconst axios = require('axios').default;\nconst URL = 'http://localhost:3000';\n/*const URL = 'http://localhost:8080/api/auth';*/\n\nconst getExpireUser = async (reqBody) => {\n\n  let valid = false;\n  //con el rol\n  await fetch(URL+\"/verifyUser\", setHeaderOptions(reqBody))\n  .then(response => response.json())\n  .then(data => {\n    valid = data.success;\n  })\n  return valid;\n}\n\nclass AuthService extends React.Component{\n\n  constructor(props) {\n    super(props)\n    this.state = null\n  }\n\n  login(username, password) {\n\n    let reqBody = `username=${username}&passwd=${password}`\n\n    return fetch(URL+\"/login\", setHeaderOptions(reqBody))\n    .then(response => {\n      if (!response.ok) {\n        if (response.status === 404) {\n          alert('User not found, please retry')\n        }\n        if (response.status === 401) {\n          alert('Invalid credentials')\n\n        }\n      }\n      return response\n    })\n    .then(response => response.json())\n    .then(data => {\n      if (data.success) {\n        let rol = data.success.trim();\n        return rol;\n      }\n    })\n  }\n\n  signup(usr){\n    return axios.post(`${URL}/signup`, usr)\n    .then(response => response.status)\n    .catch(error => {\n      if (error.response){\n        alert('Bad credentials')\n        console.info(error.response.status);\n        console.info(error.response.data);\n      }else{\n        alert('Server error');\n        console.info(error.message);\n      }\n    })\n  }\n\n\n  logout(cb) {\n    this.authenticated = false;\n    cb();\n  }\n\n  async isAuthenticated (roles) {\n\n    let reqBody = `roles=${roles}`\n\n    await getExpireUser(reqBody).then(\n      authorized => this.state = authorized\n    )\n\n    return this.state;\n  };\n}\n\nexport default new AuthService();\n"]},"metadata":{},"sourceType":"module"}