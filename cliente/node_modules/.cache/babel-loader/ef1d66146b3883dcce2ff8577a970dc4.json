{"ast":null,"code":"var _jsxFileName = \"/home/natalia/Documentos/MCSW/Tareas/Sem03/Front_MCSW/cliente/src/component/login/Login.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useContext } from 'react';\nimport { Container, Row, Buttons, Button, Title } from './StyleLogin';\nimport { useHistory } from \"react-router-dom\";\nimport { UserContext } from './../../hooks/UserContext';\nimport AuthService from \"../services/auth/AuthService\";\nimport { login } from \"../actions/Validation\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Login = props => {\n  _s();\n\n  const url = 'http://localhost:3000';\n  const history = useHistory();\n  const [username, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n\n  const routeChange = () => {\n    let path = '/register';\n    history.push(path);\n  };\n\n  const postLogin = () => dispatch => {\n    /*const options = {\n      method: 'post',\n      credentials: 'include',\n      headers: {\n        'Content-type': 'application/x-www-form-urlencoded; charset=UTF-8'\n      },\n      body: `username=${username}&passwd=${password}`\n    }\n     fetch(url+\"/login\", options)\n    .then(response => {\n      if (!response.ok) {\n        if (response.status === 404) {\n          alert('User not found, please retry')\n        }\n        if (response.status === 401) {\n          alert('Invalid credentials')\n         }\n      }\n      return response\n    })\n    .then(response => response.json())\n    .then(data => {\n      if (data.success) {\n         document.cookie = 'signedin=true'\n         let rol = data.success.trim();\n         let path = '';\n         if(rol === 'admin' || rol === 'auditor') {\n          path = rol;\n        }\n        else if(rol === 'cliente'){\n          path = 'user';\n        }\n         history.push('/'+path);\n      }\n    })*/\n    try {\n      login(username, password).then(data => {\n        alert(JSON.stringify(data));\n      }).catch(() => {\n        this.setState({\n          loading: false\n        });\n      });\n    } catch (e) {}\n  };\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(Title, {\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Login\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(Row, {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: /*#__PURE__*/_jsxDEV(\"b\", {\n          children: \"Username \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 12\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"username\",\n        onChange: event => setUsername(event.target.value),\n        style: {\n          width: \"100%\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(Row, {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: /*#__PURE__*/_jsxDEV(\"b\", {\n          children: \"Password \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 12\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"password\",\n        name: \"pasword\",\n        onChange: event => setPassword(event.target.value),\n        style: {\n          width: \"100%\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(Buttons, {\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        onClick: postLogin,\n        children: \"Login\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: routeChange,\n        children: \"Register\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Login, \"JGOwcazR1Xnza9feZjS3jiytLvc=\", false, function () {\n  return [useHistory];\n});\n\n_c = Login;\nexport default Login;\n\nvar _c;\n\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"sources":["/home/natalia/Documentos/MCSW/Tareas/Sem03/Front_MCSW/cliente/src/component/login/Login.js"],"names":["React","useState","useContext","Container","Row","Buttons","Button","Title","useHistory","UserContext","AuthService","login","Login","props","url","history","username","setUsername","password","setPassword","routeChange","path","push","postLogin","dispatch","then","data","alert","JSON","stringify","catch","setState","loading","e","event","target","value","width"],"mappings":"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","sourcesContent":["import React , { useState, useContext } from 'react';\nimport { Container, Row, Buttons, Button, Title } from './StyleLogin';\nimport { useHistory } from \"react-router-dom\";\nimport { UserContext } from './../../hooks/UserContext';\nimport AuthService from \"../services/auth/AuthService\";\nimport { login } from \"../actions/Validation\";\n\nexport const Login = (props) => {\n\n\n\n  const url = 'http://localhost:3000';\n\n  const history = useHistory();\n\n  const[username, setUsername] = useState(\"\");\n  const[password, setPassword] = useState(\"\");\n\n  const routeChange = () => {\n    let path = '/register';\n    history.push(path);\n  }\n\n\n  const postLogin = () =>  (dispatch) => {\n\n    /*const options = {\n      method: 'post',\n      credentials: 'include',\n      headers: {\n        'Content-type': 'application/x-www-form-urlencoded; charset=UTF-8'\n      },\n      body: `username=${username}&passwd=${password}`\n    }\n\n    fetch(url+\"/login\", options)\n    .then(response => {\n      if (!response.ok) {\n        if (response.status === 404) {\n          alert('User not found, please retry')\n        }\n        if (response.status === 401) {\n          alert('Invalid credentials')\n\n        }\n      }\n      return response\n    })\n    .then(response => response.json())\n    .then(data => {\n      if (data.success) {\n\n        document.cookie = 'signedin=true'\n\n        let rol = data.success.trim();\n\n        let path = '';\n\n        if(rol === 'admin' || rol === 'auditor') {\n          path = rol;\n        }\n        else if(rol === 'cliente'){\n          path = 'user';\n        }\n\n        history.push('/'+path);\n      }\n    })*/\n\n    try {\n      login(username, password)\n        .then((data) => {\n          alert(JSON.stringify(data))\n        })\n        .catch(() => {\n          this.setState({\n            loading: false\n          });\n        });\n    }\n\n    catch (e){\n\n    }\n  }\n\n  return (\n    <Container>\n    <Title>\n    <h1>Login</h1>\n    </Title>\n    <Row>\n    <label><b>Username </b></label>\n    <br /><br />\n    <input type=\"text\" name=\"username\" onChange={event => setUsername(event.target.value)}  style={{ width:\"100%\" }}/>\n    </Row>\n    <Row>\n    <label><b>Password </b></label>\n    <br /><br />\n    <input type=\"password\" name=\"pasword\" onChange={event => setPassword(event.target.value)}  style={{ width:\"100%\" }}/>\n    </Row>\n    <Buttons>\n    <Button onClick={postLogin}>Login</Button>\n    <Button onClick={routeChange}>Register</Button>\n    </Buttons>\n    </Container>\n  );\n}\n\nexport default Login;\n"]},"metadata":{},"sourceType":"module"}