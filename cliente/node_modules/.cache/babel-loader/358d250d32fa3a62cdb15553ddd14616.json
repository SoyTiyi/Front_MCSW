{"ast":null,"code":"import Cookies from 'js-cookie';\nimport React from 'react';\n\nconst axios = require('axios').default;\n\nconst URL = 'http://localhost:3000';\n/*const URL = 'http://localhost:8080/api/auth';*/\n\nconst setHeaderOptions = (username, password) => {\n  const options = {\n    method: 'post',\n    credentials: 'include',\n    headers: {\n      'Content-type': 'application/x-www-form-urlencoded; charset=UTF-8'\n    },\n    body: `username=${username}&passwd=${password}`\n  };\n  return options;\n};\n\nconst getExpireUser = async () => {\n  let valid = false;\n  await fetch(URL + \"/verifyUser\", setHeaderOptions(null, null)).then(response => response.json()).then(data => {\n    if (data.success) {\n      valid = true;\n    } else {\n      valid = false;\n    }\n  });\n  return true;\n};\n\nclass AuthService extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.setAuth = async () => {\n      /*let user = false;\n      await getExpireUser().then(x => { user = x });\n      alert(user)\n      this.setAuthenticated(true)*/\n      this.state = {\n        valid: true\n      };\n    };\n\n    this.authenticated = false;\n    this.state = {\n      valid: false\n    };\n    this.setAuth = this.setAuth.bind(this);\n  }\n\n  login(username, password) {\n    return fetch(URL + \"/login\", setHeaderOptions(username, password)).then(response => {\n      if (!response.ok) {\n        if (response.status === 404) {\n          alert('User not found, please retry');\n        }\n\n        if (response.status === 401) {\n          alert('Invalid credentials');\n        }\n      }\n\n      return response;\n    }).then(response => response.json()).then(data => {\n      if (data.success) {\n        let expiry = new Date();\n        expiry.setTime(new Date().getTime() + 10 * 60 * 1000);\n        Cookies.set(\"signedin\", \"visited=true; max-age=30000;\");\n        let rol = data.success.trim();\n        return rol;\n      }\n    });\n  }\n\n  signup(usr) {\n    return axios.post(`${URL}/signup`, usr).then(response => response.status).catch(error => {\n      if (error.response) {\n        alert('Bad credentials');\n        console.info(error.response.status);\n        console.info(error.response.data);\n      } else {\n        alert('Server error');\n        console.info(error.message);\n      }\n    });\n  }\n\n  updateUser(usr) {\n    return axios.put(`${URL}/update`, usr).then(response => response.status).catch(error => {\n      if (error.response) {\n        alert('Something was wrong');\n        console.info(error.response.status);\n      } else {\n        alert('Server error');\n        console.info(error.message);\n      }\n    });\n  }\n\n  logout(cb) {\n    this.authenticated = false;\n    cb();\n  }\n\n  isAuthenticated() {\n    this.setAuth();\n    return this.authenticated;\n  }\n\n}\n\nexport default new AuthService();","map":{"version":3,"sources":["/home/natalia/Documentos/MCSW/Tareas/Sem03/Front_MCSW/cliente/src/services/AuthService.js"],"names":["Cookies","React","axios","require","default","URL","setHeaderOptions","username","password","options","method","credentials","headers","body","getExpireUser","valid","fetch","then","response","json","data","success","AuthService","Component","constructor","props","setAuth","state","authenticated","bind","login","ok","status","alert","expiry","Date","setTime","getTime","set","rol","trim","signup","usr","post","catch","error","console","info","message","updateUser","put","logout","cb","isAuthenticated"],"mappings":"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","sourcesContent":["import Cookies from 'js-cookie'\nimport React from 'react';\n\n\nconst axios = require('axios').default;\nconst URL = 'http://localhost:3000';\n/*const URL = 'http://localhost:8080/api/auth';*/\n\nconst setHeaderOptions = (username, password) => {\n\n  const options = {\n    method: 'post',\n    credentials: 'include',\n    headers: {\n      'Content-type': 'application/x-www-form-urlencoded; charset=UTF-8'\n    },\n    body: `username=${username}&passwd=${password}`\n  }\n  return options;\n}\n\nconst getExpireUser = async () => {\n\n  let valid = false;\n\n  await fetch(URL+\"/verifyUser\", setHeaderOptions(null, null))\n  .then(response => response.json())\n  .then(data => {\n    if (data.success) {\n      valid = true;\n    }\n    else {valid = false}\n  })\n  return true;\n}\n\nclass AuthService extends React.Component{\n  constructor(props) {\nsuper(props)\n    this.authenticated =  false;\n    this.state = {valid: false};\n       this.setAuth = this.setAuth.bind(this);\n\n\n  }\n\n\n  setAuth = async () => {\n    /*let user = false;\n    await getExpireUser().then(x => { user = x });\n    alert(user)\n    this.setAuthenticated(true)*/\n    this.state = ({\n     valid: true\n   });\n   }\n\n\n\n\n  login(username, password) {\n\n    return fetch(URL+\"/login\", setHeaderOptions(username, password))\n    .then(response => {\n      if (!response.ok) {\n        if (response.status === 404) {\n          alert('User not found, please retry')\n        }\n        if (response.status === 401) {\n          alert('Invalid credentials')\n\n        }\n      }\n      return response\n    })\n    .then(response => response.json())\n    .then(data => {\n      if (data.success) {\n        let expiry = new Date();\n        expiry.setTime( new Date().getTime()+(10*60*1000));\n        Cookies.set(\"signedin\", \"visited=true; max-age=30000;\");\n        let rol = data.success.trim();\n\n        return rol;\n      }\n    })\n  }\n\n  signup(usr){\n    return axios.post(`${URL}/signup`, usr)\n    .then(response => response.status)\n    .catch(error => {\n      if (error.response){\n        alert('Bad credentials')\n        console.info(error.response.status);\n        console.info(error.response.data);\n      }else{\n        alert('Server error');\n        console.info(error.message);\n      }\n    })\n  }\n\n  updateUser(usr){\n    return axios.put(`${URL}/update`, usr)\n    .then(response => response.status)\n    .catch(error => {\n      if (error.response){\n        alert('Something was wrong')\n        console.info(error.response.status);\n      }else{\n        alert('Server error');\n        console.info(error.message);\n      }\n    })\n  }\n\n  logout(cb) {\n    this.authenticated = false;\n    cb();\n  }\n\n  isAuthenticated() {\n    this.setAuth()\n\n    return this.authenticated;\n  }\n}\n\nexport default new AuthService();\n"]},"metadata":{},"sourceType":"module"}