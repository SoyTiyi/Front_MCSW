{"ast":null,"code":"import React from 'react';\n\nconst axios = require('axios').default;\n\nconst URL = 'http://localhost:3000';\n/*const URL = 'http://localhost:8080/api/auth';*/\n\nconst setHeaderOptions = body => {\n  const options = {\n    method: 'post',\n    credentials: 'include',\n    headers: {\n      'Content-type': 'application/x-www-form-urlencoded; charset=UTF-8'\n    },\n    body: body\n  };\n  return options;\n};\n\nconst getExpireUser = async () => {\n  let valid = false; //con el rol\n\n  await fetch(URL + \"/verifyUser\", setHeaderOptions(null)).then(response => response.json()).then(data => {\n    valid = data.success;\n  });\n  return valid;\n};\n\nclass AuthService extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = null;\n    this.componentDidMount = this.componentDidMount.bind(this);\n  }\n\n  componentDidMount() {\n    // setState is called once the asynchronous call is resolved.\n    getExpireUser().then(authorized => this.state = authorized);\n  }\n\n  login(username, password) {\n    let reqBody = `username=${username}&passwd=${password}`;\n    return fetch(URL + \"/login\", setHeaderOptions(reqBody)).then(response => {\n      if (!response.ok) {\n        if (response.status === 404) {\n          alert('User not found, please retry');\n        }\n\n        if (response.status === 401) {\n          alert('Invalid credentials');\n        }\n      }\n\n      return response;\n    }).then(response => response.json()).then(data => {\n      if (data.success) {\n        let rol = data.success.trim();\n        return rol;\n      }\n    });\n  }\n\n  signup(usr) {\n    return axios.post(`${URL}/signup`, usr).then(response => response.status).catch(error => {\n      if (error.response) {\n        alert('Bad credentials');\n        console.info(error.response.status);\n        console.info(error.response.data);\n      } else {\n        alert('Server error');\n        console.info(error.message);\n      }\n    });\n  }\n\n  updateUser(usr) {\n    return axios.put(`${URL}/update`, usr).then(response => response.status).catch(error => {\n      if (error.response) {\n        alert('Something was wrong');\n        console.info(error.response.status);\n      } else {\n        alert('Server error');\n        console.info(error.message);\n      }\n    });\n  }\n\n  logout(cb) {\n    this.authenticated = false;\n    cb();\n  }\n\n  async isAuthenticated() {\n    await getExpireUser().then(authorized => this.state = authorized);\n    return this.state;\n  }\n\n}\n\nexport default new AuthService();","map":{"version":3,"sources":["/home/natalia/Documentos/MCSW/Tareas/Sem03/Front_MCSW/cliente/src/services/AuthService.js"],"names":["React","axios","require","default","URL","setHeaderOptions","body","options","method","credentials","headers","getExpireUser","valid","fetch","then","response","json","data","success","AuthService","Component","constructor","props","state","componentDidMount","bind","authorized","login","username","password","reqBody","ok","status","alert","rol","trim","signup","usr","post","catch","error","console","info","message","updateUser","put","logout","cb","authenticated","isAuthenticated"],"mappings":"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","sourcesContent":["import React from 'react';\n\n\nconst axios = require('axios').default;\nconst URL = 'http://localhost:3000';\n/*const URL = 'http://localhost:8080/api/auth';*/\n\nconst setHeaderOptions = (body) => {\n\n  const options = {\n    method: 'post',\n    credentials: 'include',\n    headers: {\n      'Content-type': 'application/x-www-form-urlencoded; charset=UTF-8'\n    },\n    body: body\n  }\n  return options;\n}\n\nconst getExpireUser = async () => {\n\n  let valid = false;\n  //con el rol\n  await fetch(URL+\"/verifyUser\", setHeaderOptions(null))\n  .then(response => response.json())\n  .then(data => {\n    valid = data.success;\n  })\n  return valid;\n}\n\nclass AuthService extends React.Component{\n\n  constructor(props) {\n    super(props)\n    this.state = null\n    this.componentDidMount = this.componentDidMount.bind(this)\n\n\n\n  }\n\n  componentDidMount() {\n    // setState is called once the asynchronous call is resolved.\n    getExpireUser().then(\n      authorized => this.state = authorized\n    )\n  }\n\n  login(username, password) {\n\n    let reqBody = `username=${username}&passwd=${password}`\n\n    return fetch(URL+\"/login\", setHeaderOptions(reqBody))\n    .then(response => {\n      if (!response.ok) {\n        if (response.status === 404) {\n          alert('User not found, please retry')\n        }\n        if (response.status === 401) {\n          alert('Invalid credentials')\n\n        }\n      }\n      return response\n    })\n    .then(response => response.json())\n    .then(data => {\n      if (data.success) {\n        let rol = data.success.trim();\n        return rol;\n      }\n    })\n  }\n\n  signup(usr){\n    return axios.post(`${URL}/signup`, usr)\n    .then(response => response.status)\n    .catch(error => {\n      if (error.response){\n        alert('Bad credentials')\n        console.info(error.response.status);\n        console.info(error.response.data);\n      }else{\n        alert('Server error');\n        console.info(error.message);\n      }\n    })\n  }\n\n  updateUser(usr){\n    return axios.put(`${URL}/update`, usr)\n    .then(response => response.status)\n    .catch(error => {\n      if (error.response){\n        alert('Something was wrong')\n        console.info(error.response.status);\n      }else{\n        alert('Server error');\n        console.info(error.message);\n      }\n    })\n  }\n\n  logout(cb) {\n    this.authenticated = false;\n    cb();\n  }\n\n  async isAuthenticated () {\n\nawait getExpireUser().then(\n  authorized => this.state = authorized\n)\n\n    return this.state;\n  };\n}\n\nexport default new AuthService();\n"]},"metadata":{},"sourceType":"module"}