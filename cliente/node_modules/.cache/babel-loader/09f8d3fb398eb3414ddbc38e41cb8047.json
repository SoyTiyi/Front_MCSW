{"ast":null,"code":"import Cookies from 'js-cookie';\nimport React from 'react';\n\nconst axios = require('axios').default;\n\nconst URL = 'http://localhost:3000';\n/*const URL = 'http://localhost:8080/api/auth';*/\n\nconst setHeaderOptions = (username, password) => {\n  const options = {\n    method: 'post',\n    credentials: 'include',\n    headers: {\n      'Content-type': 'application/x-www-form-urlencoded; charset=UTF-8'\n    },\n    body: `username=${username}&passwd=${password}`\n  };\n  return options;\n};\n\nconst getExpireUser = async () => {\n  let valid = false;\n  await fetch(URL + \"/verifyUser\", setHeaderOptions(null, null)).then(response => response.json()).then(data => {\n    valid = data.success;\n  });\n  return valid;\n};\n\nclass AuthService extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      authorized: null\n    };\n    this.componentDidMount = this.componentDidMount.bind(this);\n  }\n\n  componentDidMount() {\n    // setState is called once the asynchronous call is resolved.\n    getExpireUser().then(authorized => this.setState({\n      authorized: true\n    }));\n  }\n  /*  setAuth = async () => {\n  \n  let ValidUser = false;\n  \n  await getExpireUser().then(ans => {\n  this.state = ({\n  valid: ans\n  });})\n  }*/\n\n\n  login(username, password) {\n    return fetch(URL + \"/login\", setHeaderOptions(username, password)).then(response => {\n      if (!response.ok) {\n        if (response.status === 404) {\n          alert('User not found, please retry');\n        }\n\n        if (response.status === 401) {\n          alert('Invalid credentials');\n        }\n      }\n\n      return response;\n    }).then(response => response.json()).then(data => {\n      if (data.success) {\n        let expiry = new Date();\n        expiry.setTime(new Date().getTime() + 10 * 60 * 1000);\n        Cookies.set(\"signedin\", \"visited=true; max-age=30000;\");\n        let rol = data.success.trim();\n        return rol;\n      }\n    });\n  }\n\n  signup(usr) {\n    return axios.post(`${URL}/signup`, usr).then(response => response.status).catch(error => {\n      if (error.response) {\n        alert('Bad credentials');\n        console.info(error.response.status);\n        console.info(error.response.data);\n      } else {\n        alert('Server error');\n        console.info(error.message);\n      }\n    });\n  }\n\n  updateUser(usr) {\n    return axios.put(`${URL}/update`, usr).then(response => response.status).catch(error => {\n      if (error.response) {\n        alert('Something was wrong');\n        console.info(error.response.status);\n      } else {\n        alert('Server error');\n        console.info(error.message);\n      }\n    });\n  }\n\n  logout(cb) {\n    this.authenticated = false;\n    cb();\n  }\n\n  isAuthenticated() {\n    /*\n    await this.setAuth();\n    alert(this.state.valid)\n     setValidUser(this.state.valid);*/\n    this.componentDidMount();\n    return this.state;\n  }\n\n}\n\nexport default new AuthService();","map":{"version":3,"sources":["/home/natalia/Documentos/MCSW/Tareas/Sem03/Front_MCSW/cliente/src/services/AuthService.js"],"names":["Cookies","React","axios","require","default","URL","setHeaderOptions","username","password","options","method","credentials","headers","body","getExpireUser","valid","fetch","then","response","json","data","success","AuthService","Component","constructor","props","state","authorized","componentDidMount","bind","setState","login","ok","status","alert","expiry","Date","setTime","getTime","set","rol","trim","signup","usr","post","catch","error","console","info","message","updateUser","put","logout","cb","authenticated","isAuthenticated"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,WAApB;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAGA,MAAMC,KAAK,GAAGC,OAAO,CAAC,OAAD,CAAP,CAAiBC,OAA/B;;AACA,MAAMC,GAAG,GAAG,uBAAZ;AACA;;AAEA,MAAMC,gBAAgB,GAAG,CAACC,QAAD,EAAWC,QAAX,KAAwB;AAE/C,QAAMC,OAAO,GAAG;AACdC,IAAAA,MAAM,EAAE,MADM;AAEdC,IAAAA,WAAW,EAAE,SAFC;AAGdC,IAAAA,OAAO,EAAE;AACP,sBAAgB;AADT,KAHK;AAMdC,IAAAA,IAAI,EAAG,YAAWN,QAAS,WAAUC,QAAS;AANhC,GAAhB;AAQA,SAAOC,OAAP;AACD,CAXD;;AAaA,MAAMK,aAAa,GAAG,YAAY;AAEhC,MAAIC,KAAK,GAAG,KAAZ;AAEA,QAAMC,KAAK,CAACX,GAAG,GAAC,aAAL,EAAoBC,gBAAgB,CAAC,IAAD,EAAO,IAAP,CAApC,CAAL,CACLW,IADK,CACAC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADZ,EAELF,IAFK,CAEAG,IAAI,IAAI;AACZL,IAAAA,KAAK,GAAGK,IAAI,CAACC,OAAb;AACD,GAJK,CAAN;AAKA,SAAON,KAAP;AACD,CAVD;;AAYA,MAAMO,WAAN,SAA0BrB,KAAK,CAACsB,SAAhC,CAAyC;AACvCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AAAEC,MAAAA,UAAU,EAAE;AAAd,KAAb;AACJ,SAAKC,iBAAL,GAAyB,KAAKA,iBAAL,CAAuBC,IAAvB,CAA4B,IAA5B,CAAzB;AAEG;;AAEDD,EAAAA,iBAAiB,GAAG;AACpB;AACAd,IAAAA,aAAa,GAAGG,IAAhB,CACEU,UAAU,IAAI,KAAKG,QAAL,CAAc;AAAEH,MAAAA,UAAU,EAAE;AAAd,KAAd,CADhB;AAGD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGAI,EAAAA,KAAK,CAACxB,QAAD,EAAWC,QAAX,EAAqB;AAExB,WAAOQ,KAAK,CAACX,GAAG,GAAC,QAAL,EAAeC,gBAAgB,CAACC,QAAD,EAAWC,QAAX,CAA/B,CAAL,CACNS,IADM,CACDC,QAAQ,IAAI;AAChB,UAAI,CAACA,QAAQ,CAACc,EAAd,EAAkB;AAChB,YAAId,QAAQ,CAACe,MAAT,KAAoB,GAAxB,EAA6B;AAC3BC,UAAAA,KAAK,CAAC,8BAAD,CAAL;AACD;;AACD,YAAIhB,QAAQ,CAACe,MAAT,KAAoB,GAAxB,EAA6B;AAC3BC,UAAAA,KAAK,CAAC,qBAAD,CAAL;AAED;AACF;;AACD,aAAOhB,QAAP;AACD,KAZM,EAaND,IAbM,CAaDC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EAbX,EAcNF,IAdM,CAcDG,IAAI,IAAI;AACZ,UAAIA,IAAI,CAACC,OAAT,EAAkB;AAChB,YAAIc,MAAM,GAAG,IAAIC,IAAJ,EAAb;AACAD,QAAAA,MAAM,CAACE,OAAP,CAAgB,IAAID,IAAJ,GAAWE,OAAX,KAAsB,KAAG,EAAH,GAAM,IAA5C;AACAtC,QAAAA,OAAO,CAACuC,GAAR,CAAY,UAAZ,EAAwB,8BAAxB;AACA,YAAIC,GAAG,GAAGpB,IAAI,CAACC,OAAL,CAAaoB,IAAb,EAAV;AAEA,eAAOD,GAAP;AACD;AACF,KAvBM,CAAP;AAwBD;;AAEDE,EAAAA,MAAM,CAACC,GAAD,EAAK;AACT,WAAOzC,KAAK,CAAC0C,IAAN,CAAY,GAAEvC,GAAI,SAAlB,EAA4BsC,GAA5B,EACN1B,IADM,CACDC,QAAQ,IAAIA,QAAQ,CAACe,MADpB,EAENY,KAFM,CAEAC,KAAK,IAAI;AACd,UAAIA,KAAK,CAAC5B,QAAV,EAAmB;AACjBgB,QAAAA,KAAK,CAAC,iBAAD,CAAL;AACAa,QAAAA,OAAO,CAACC,IAAR,CAAaF,KAAK,CAAC5B,QAAN,CAAee,MAA5B;AACAc,QAAAA,OAAO,CAACC,IAAR,CAAaF,KAAK,CAAC5B,QAAN,CAAeE,IAA5B;AACD,OAJD,MAIK;AACHc,QAAAA,KAAK,CAAC,cAAD,CAAL;AACAa,QAAAA,OAAO,CAACC,IAAR,CAAaF,KAAK,CAACG,OAAnB;AACD;AACF,KAXM,CAAP;AAYD;;AAEDC,EAAAA,UAAU,CAACP,GAAD,EAAK;AACb,WAAOzC,KAAK,CAACiD,GAAN,CAAW,GAAE9C,GAAI,SAAjB,EAA2BsC,GAA3B,EACN1B,IADM,CACDC,QAAQ,IAAIA,QAAQ,CAACe,MADpB,EAENY,KAFM,CAEAC,KAAK,IAAI;AACd,UAAIA,KAAK,CAAC5B,QAAV,EAAmB;AACjBgB,QAAAA,KAAK,CAAC,qBAAD,CAAL;AACAa,QAAAA,OAAO,CAACC,IAAR,CAAaF,KAAK,CAAC5B,QAAN,CAAee,MAA5B;AACD,OAHD,MAGK;AACHC,QAAAA,KAAK,CAAC,cAAD,CAAL;AACAa,QAAAA,OAAO,CAACC,IAAR,CAAaF,KAAK,CAACG,OAAnB;AACD;AACF,KAVM,CAAP;AAWD;;AAEDG,EAAAA,MAAM,CAACC,EAAD,EAAK;AACT,SAAKC,aAAL,GAAqB,KAArB;AACAD,IAAAA,EAAE;AACH;;AAEDE,EAAAA,eAAe,GAAI;AACjB;AACF;AACA;AACA;AAEA,SAAK3B,iBAAL;AACE,WAAO,KAAKF,KAAZ;AACD;;AAhGwC;;AAkGzC,eAAe,IAAIJ,WAAJ,EAAf","sourcesContent":["import Cookies from 'js-cookie'\nimport React from 'react';\n\n\nconst axios = require('axios').default;\nconst URL = 'http://localhost:3000';\n/*const URL = 'http://localhost:8080/api/auth';*/\n\nconst setHeaderOptions = (username, password) => {\n\n  const options = {\n    method: 'post',\n    credentials: 'include',\n    headers: {\n      'Content-type': 'application/x-www-form-urlencoded; charset=UTF-8'\n    },\n    body: `username=${username}&passwd=${password}`\n  }\n  return options;\n}\n\nconst getExpireUser = async () => {\n\n  let valid = false;\n\n  await fetch(URL+\"/verifyUser\", setHeaderOptions(null, null))\n  .then(response => response.json())\n  .then(data => {\n    valid = data.success;\n  })\n  return valid;\n}\n\nclass AuthService extends React.Component{\n  constructor(props) {\n    super(props)\n    this.state = { authorized: null }\nthis.componentDidMount = this.componentDidMount.bind(this)\n\n  }\n\n  componentDidMount() {\n  // setState is called once the asynchronous call is resolved.\n  getExpireUser().then(\n    authorized => this.setState({ authorized: true})\n  )\n}\n\n/*  setAuth = async () => {\n\nlet ValidUser = false;\n\nawait getExpireUser().then(ans => {\nthis.state = ({\nvalid: ans\n});})\n}*/\n\n\nlogin(username, password) {\n\n  return fetch(URL+\"/login\", setHeaderOptions(username, password))\n  .then(response => {\n    if (!response.ok) {\n      if (response.status === 404) {\n        alert('User not found, please retry')\n      }\n      if (response.status === 401) {\n        alert('Invalid credentials')\n\n      }\n    }\n    return response\n  })\n  .then(response => response.json())\n  .then(data => {\n    if (data.success) {\n      let expiry = new Date();\n      expiry.setTime( new Date().getTime()+(10*60*1000));\n      Cookies.set(\"signedin\", \"visited=true; max-age=30000;\");\n      let rol = data.success.trim();\n\n      return rol;\n    }\n  })\n}\n\nsignup(usr){\n  return axios.post(`${URL}/signup`, usr)\n  .then(response => response.status)\n  .catch(error => {\n    if (error.response){\n      alert('Bad credentials')\n      console.info(error.response.status);\n      console.info(error.response.data);\n    }else{\n      alert('Server error');\n      console.info(error.message);\n    }\n  })\n}\n\nupdateUser(usr){\n  return axios.put(`${URL}/update`, usr)\n  .then(response => response.status)\n  .catch(error => {\n    if (error.response){\n      alert('Something was wrong')\n      console.info(error.response.status);\n    }else{\n      alert('Server error');\n      console.info(error.message);\n    }\n  })\n}\n\nlogout(cb) {\n  this.authenticated = false;\n  cb();\n}\n\nisAuthenticated () {\n  /*\n  await this.setAuth();\n  alert(this.state.valid)\n\n  setValidUser(this.state.valid);*/\nthis.componentDidMount()\n  return this.state;\n};\n}\nexport default new AuthService();\n"]},"metadata":{},"sourceType":"module"}